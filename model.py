{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport math,copy,time\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\n\n\n# # Model Architecture\n\n# ## Embedding\n\n# In[541]:\n\n\nclass Embedding(nn.Module):\n    def __init__(self, voc_size, d_model):\n        super(Embedding, self).__init__()\n        self.embedding = nn.Embedding(voc_size, d_model)\n        self.d_model = d_model #8\n    def forward(self, x):\n        # print('src_after_embedding:{}'.format(self.embedding(x).shape))\n        return self.embedding(x)*math.sqrt(self.d_model)\n\n\n# ## Positional Encoding\n\n# In[542]:\n\n\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, dropout, max_len = 5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(dropout)\n        \n        pe = torch.zeros(max_len, d_model) #[max_len, d_model]\n        pos = torch.arange(0, max_len, dtype = torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2, dtype = torch.float)*(-torch.log(torch.tensor(10000.0)))/d_model)\n        pe[:,0::2] = torch.sin(pos*div_term)\n        pe[:,1::2] = torch.cos(pos*div_term)\n        pe = pe.unsqueeze(0)\n        self.register_buffer('pe', pe)\n    \n    def forward(self,x):\n        x = x + self.pe[:,:x.size(1),:]\n        return self.dropout(x)\n        \n\n\n# ## Multihead Attention\n\n# ### Attention\n\n# In[543]:\n\n\ndef attention(query, key, value, mask = None, dropout = None):\n    d_k = query.size(-1)\n    scores = torch.matmul(query, key.transpose(-2,-1))/math.sqrt(d_k)\n    \n    if mask is not None:\n        scores = scores.masked_fill(mask == 0, -1e9)\n        \n    scores = torch.softmax(scores, dim=-1)\n    \n    if dropout is not None:\n        scores = dropout(scores)\n\n    attn = torch.matmul(scores, value)\n    return attn\n\n\n# ### Multihead Attention\n\n# In[544]:\n\n\nclass MultiHeadedAttention(nn.Module):\n    def __init__(self, num_heads, d_model, dropout=0.1):\n        super(MultiHeadedAttention, self).__init__()\n        self.num_heads = num_heads\n        assert d_model % num_heads == 0 #8%2\n        self.depth = d_model // num_heads\n        self.linears = clones(nn.Linear(d_model, d_model), 4)\n        self.dropout = nn.Dropout(dropout)\n        self.d_model = d_model\n\n    def split_heads(self, x):\n        batch_size, seq_length, d_model = x.size()\n        return x.view(batch_size, seq_length, self.num_heads, self.depth).transpose(1,2)\n        \n    def forward(self, query, key, value, mask = None):\n        # print('multiheadattention1:{}'.format(mask.shape))\n        if mask is not None: \n          mask = mask.unsqueeze(1) # 没懂\n        # print('multiheadattention2:{}'.format(mask.shape))\n        # print('query_before_split:{}'.format(query.shape))\n\n        # print('query_after_split:{}'.format(query.shape)) #4,2,10,4\n        # print('batch_size.{}'.format(self.batch_size))\n        # print('d_model:{}'.format(self.d_model))\n        # print('num_heads:{}'.format(self.num_heads))\n\n        query, key, value = [l(x) for l, x in zip(self.linears, (query, key, value))]\n        # print('query2:{}'.format(query.shape)) \n        \n        query = self.split_heads(query)\n        key = self.split_heads(key)\n        value = self.split_heads(value)\n        # print('query_after_split:{}'.format(query.shape)) #4,2,10,4     \n        attn = attention(query, key, value, mask=mask, dropout=self.dropout)\n        batch_size, _, seq_length, _ = attn.size()\n        attn_output = attn.transpose(1,2).contiguous().view(batch_size, seq_length, self.d_model)\n\n        return self.linears[-1](attn_output)\n            \n        \n\n\n# ## PositionwiseFeedForward\n\n# In[545]:\n\n\nclass PositionwiseFeedForward(nn.Module):\n    def __init__(self, d_model, d_ff, dropout=0.1):\n        super(PositionwiseFeedForward, self).__init__()\n        self.linear1 = nn.Linear(d_model, d_ff)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(dropout)\n        self.linear2 = nn.Linear(d_ff, d_model)        \n        \n    def forward(self, x):\n        return self.linear2(self.dropout(self.relu(self.linear1(x))))\n\n\n# ## SubLayerConnection\n\n# In[546]:\n\n\nclass SublayerConnection(nn.Module):\n    def __init__(self, d_model, dropout):\n        super(SublayerConnection, self).__init__()\n        self.layernorm = nn.LayerNorm(d_model)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, sublayer):\n        # print(sublayer(self.layernorm(x).shape))\n        return x + self.dropout(sublayer(self.layernorm(x)))\n\n\n# ## Encoder\n\n# In[547]:\n\n\ndef clones(module, N):\n    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])\n\n\n# ### EncoderLayer\n\n# In[548]:\n\n\nclass EncoderLayer(nn.Module):\n    def __init__(self,self_attn, feed_forward, d_model, dropout):\n\n        super(EncoderLayer, self).__init__()\n        self.self_attn = self_attn\n        self.feed_forward = feed_forward\n        self.sublayer = clones(SublayerConnection(d_model, dropout),2)\n\n        self.size = d_model #为什么要有？\n    \n    def forward(self,x, mask):\n        # print('encoderlayer1:{}'.format(x.shape))\n        x = self.sublayer[0](x, lambda x: self.self_attn(x,x,x,mask))\n        # print('encoderlayer2:{}'.format(x.shape))\n        return self.sublayer[1](x, self.feed_forward)\n\n\n# ### Encoder\n\n# In[549]:\n\n\nclass Encoder(nn.Module):\n    def __init__(self,layer, N):\n        super(Encoder, self).__init__()\n        self.layers = clones(layer, N)\n        self.layernorm = nn.LayerNorm(layer.size)\n        \n    def forward(self, x, mask):\n        for layer in self.layers:\n            x = layer(x, mask)\n        return self.layernorm(x)\n\n\n# ## Decoder\n\n# ### DecoderLayer\n\n# In[550]:\n\n\nclass DecoderLayer(nn.Module):\n    def __init__(self,self_attn, cross_attn, feed_forward, d_model, dropout):\n        super(DecoderLayer, self).__init__()\n        self.self_attn = self_attn\n        self.cross_attn = cross_attn\n        self.feed_forward = feed_forward\n        self.sublayer = clones(SublayerConnection(d_model, dropout),3)\n\n        self.size = d_model #为什么要有？\n        \n    def forward(self, x, memory, src_mask, tgt_mask):\n        self_attn_x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tgt_mask))\n        cross_attn_x = self.sublayer[1](self_attn_x, lambda self_attn_x: self.cross_attn(self_attn_x, memory, memory, src_mask))\n        # print(cross_attn_x.shape)\n        return self.sublayer[2](cross_attn_x, self.feed_forward)\n        \n\n\n# ### Decoder\n\n# In[551]:\n\n\nclass Decoder(nn.Module):\n    def __init__(self, layer, N):\n        super(Decoder, self).__init__()\n        self.layers = clones(layer, N)\n        self.layernorm = nn.LayerNorm(layer.size)\n    def forward(self, x, memory, src_mask, tgt_mask):\n        for layer in self.layers:\n            x = layer(x, memory, src_mask, tgt_mask)\n        return self.layernorm(x)\n\n\n# ## Generator\n\n# In[552]:\n\n\nclass Generator(nn.Module):\n    def __init__(self, d_model, vocab_size):\n        super(Generator, self).__init__()\n        self.linear = nn.Linear(d_model, vocab_size)\n\n    def forward(self, x):\n        x = self.linear(x)\n        return F.log_softmax(x, dim=-1)\n\n\n# ## EncoderDecoder\n\n# In[553]:\n\n\nclass EncoderDecoder(nn.Module):\n    def __init__(self, encoder, decoder, src_embed, tgt_embed, generator):\n        super(EncoderDecoder, self).__init__()\n        self.src_embed = src_embed\n        self.tgt_embed = tgt_embed\n        self.encoder = encoder\n        self.decoder = decoder\n        self.generator = generator\n        \n    def encode(self, src, src_mask):\n        # print('encode_src:{}'.format(src.shape))\n        return self.encoder(self.src_embed(src), src_mask)\n\n    def decode(self, tgt, memory, src_mask, tgt_mask):\n        return self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)\n\n    def forward(self, tgt, src, src_mask, tgt_mask):\n        return self.decode(tgt, self.encode(src, src_mask), src_mask, tgt_mask)\n        \n\n\n# ## Full Model\n\n# In[554]:\n\n\ndef make_model(src_vocab, tgt_vocab, N=6, d_model=512, d_ff=2048, h=8, dropout=0.1):\n    \"Helper: Construct a model from hyperparameters.\"\n    c = copy.deepcopy\n    attn = MultiHeadedAttention(h, d_model)\n    ff = PositionwiseFeedForward(d_model, d_ff, dropout)\n    position = PositionalEncoding(d_model, dropout)\n    model = EncoderDecoder(\n        Encoder(EncoderLayer(c(attn), c(ff), d_model, dropout), N),\n        Decoder(DecoderLayer(c(attn), c(attn), c(ff), d_model, dropout), N),\n        nn.Sequential(Embedding(src_vocab, d_model), c(position)),\n        nn.Sequential(Embedding(tgt_vocab, d_model), c(position)),\n        Generator(d_model, tgt_vocab)\n    )\n    \n    for p in model.parameters():\n        if p.dim() > 1:\n            nn.init.xavier_uniform_(p)\n    return model\n\n\n# ## Generate Mask Mastrix\n\n# In[555]:\n\n\ndef subsequent_mask(size):  #生成下三角矩阵，用来屏蔽未来的信息\n    \"Mask out subsequent positions.\"\n    attn_shape = (1, size, size) # trg=tgt.size(-1)=9,(1,9,9)\n    subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('uint8')\n    # print('subsequent_mask:{}'.format(subsequent_mask.shape))\n \n    return torch.from_numpy(subsequent_mask) == 0","metadata":{"_uuid":"39dc7967-6dea-40be-8e41-3632ac96fc36","_cell_guid":"1b8161fc-cd98-40c4-8be3-4fedb5696e66","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-21T14:19:07.517883Z","iopub.execute_input":"2025-04-21T14:19:07.518373Z","iopub.status.idle":"2025-04-21T14:19:07.558455Z","shell.execute_reply.started":"2025-04-21T14:19:07.518345Z","shell.execute_reply":"2025-04-21T14:19:07.557372Z"}},"outputs":[],"execution_count":7}]}